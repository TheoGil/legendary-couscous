.tile {
  // Default background blob color, this should be overriden for every tile
  --color-surface: #{$color-tile-blob-default};

  width: 100%;
  min-height: 300px;

  &--placeholder {
    background-color: $color-placeholder;
  }

  &--fullwidth {
    grid-column: 1 / -1;
    margin-top: 28vw; // Prevent can from overlapping previous tiles. Arbitrary value, tweak until look right
    position: relative;
    display: flex;
    flex-direction: column; // On smaller screens align children vertically top to bottom
    align-items: center;

    @include bp($breakpoint-tile) {
      flex-direction: row; // On larger screens align children horizontally left to right
      height: 400px;
      margin: 0;
    }

    @include bp($breakpoint-medium) {
      margin: min(6vw, 100px) 0; // Prevent can from overlapping sibling tiles. Arbitrary value, tweak until look right
    }

    &--1 {
      --color-surface: #bae8e8;
    }
  }

  &__visual {
    $can-width: 50%;
    position: relative;
    width: $tile-can-container-width;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: -30%; // Tricky to get right, tweak manually until looks right.

    @include bp($breakpoint-tile) {
      margin-top: 0;
      width: $tile-can-container-width-medium;
    }

    .can {
      &-container {
        display: block;
        width: $can-width;
      }

      &-body {
        display: block;
        width: 100%;
        height: auto;
      }

      &-label {
        &-container {
          overflow: hidden;
          position: absolute;
          top: 0;
          width: $can-width;
          padding-top: 105%; // Tricky to get right, tweak manually until looks right.
          transform: translateY(
            15%
          ); // Tricky to get right, tweak manually until looks right.

          &:before {
            @include pseudo-cover;
            @include can-lighting(1);
          }

          &:after {
            @include pseudo-cover;
            @include can-lighting(-1);
          }
        }

        &-image {
          @include cover;
          width: auto;
          transform: translateX(-10%);
        }
      }
    }

    .particle {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      object-fit: contain;

      &-1 {
        transform: translate(-60%, 20%) scale(0.5) rotate(-40deg);
      }

      &-2 {
        transform: translate(90%, -70%) scale(0.9) rotate(35deg);
      }

      &-3 {
        transform: translate(70%, 50%) scale(0.8) rotate(0deg);
      }
    }

    .ingredient {
      width: $can-width;
      padding-top: $can-width;
      position: absolute;
      z-index: -1;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }

  &__content {
    width: 100%;
    padding: $gutter;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;

    @include bp($breakpoint-tile) {
      width: $tile-content-container-width-medium;
    }
  }

  &__title {
    color: $color-font-headings;
    font-size: $font-size-tile-title;
    line-height: 1;
    margin: 0 0 0.25em 0;
  }

  &__subtitle {
    font-weight: 400;
    font-size: $font-size-tile-subtitle;
    line-height: 1;
    margin: 0 0 1em 0;

    @include bp($breakpoint-tile) {
      margin-bottom: 0.5em;
    }
  }

  &__cta {
    position: relative;
    padding: 10px calc(25px + 3em) 10px 25px;
    background-color: $color-surface-button;
    color: $color-font-button;
    border-width: 0;
    text-transform: uppercase;
    cursor: pointer;
    border: 1px currentColor solid;
    border-radius: 10px;

    &__icon {
      position: absolute;
      right: 15px;
      top: -0.75em;
    }

    &:active {
      .can-lid__strip {
        transform: scaleY(0.75);
      }

      .can-lid__closed-hole {
        transform: scaleY(0.5);
      }

      .can-lid__line {
        transform: rotate(var(--rotation)) scaleX(1);
      }
    }
  }

  &__background {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: $color-placeholder;

    .blob {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 10;
      fill: var(--color-surface);
    }
  }

  &__replay-btn {
    position: absolute;
    right: $gutter;
    bottom: $gutter;
    border-width: 0;
    background-color: transparent;
    cursor: pointer;

    &__icon {
      width: 2em;
      height: 2em;
      fill: $color-font-body;
      transition: transform 0.25s ease-in;
    }

    &:hover,
    &:focus {
      .tile__replay-btn__icon {
        transition: transform 0.5s ease-out;
        transform: rotate(-360deg);
      }
    }
  }
}
