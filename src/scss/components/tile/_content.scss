.tile {
  // Default background blob color, this should be overriden for every tile
  --color-surface: #{$color-tile-blob-default};

  grid-column: 1 / -1;
  width: 100%;
  margin-top: 28vw; // Prevent can from overlapping previous tiles. Arbitrary value, tweak until look right
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;

  @include bp($breakpoint-tile) {
    flex-direction: row;
    height: 400px;
    margin: 0;
  }

  @include bp($breakpoint-medium) {
    margin: min(6vw, 100px) 0; // Prevent can from overlapping previous tiles. Arbitrary value, tweak until look right
  }

  &-content {
    width: 100%;
    padding: $gutter;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;

    @include bp($breakpoint-tile) {
      width: $tile-content-container-width-medium;
    }
  }

  &-title {
    color: $color-font-headings;
    font-size: $font-size-tile-title;
    line-height: 1;
    margin: 0 0 0.25em 0;
  }

  &-subtitle {
    font-weight: 400;
    font-size: $font-size-tile-subtitle;
    line-height: 1;
    margin: 0 0 1em 0;

    @include bp($breakpoint-tile) {
      margin-bottom: 0.5em;
    }
  }

  &-cta {
    position: relative;
    padding: 10px calc(25px + 3em) 10px 25px;
    background-color: $color-surface-button;
    color: $color-font-button;
    border-width: 0;
    text-transform: uppercase;
    cursor: pointer;
    border: 1px currentColor solid;
    border-radius: 10px;

    &-icon-container {
      position: absolute;
      right: 15px;
      top: -0.75em;

      .line {
        position: absolute;
        background-color: currentColor;
        height: 1px;
        bottom: 0;
        transform: rotate(var(--rotation)) scaleX(0);
        transition: transform 100ms ease-out;
        transform-origin: 0 0;

        &-1 {
          --rotation: 120deg;
          left: 35%;
          width: 1.25em;
        }

        &-2 {
          --rotation: 90deg;
          left: 50%;
          width: 1.75em;
          transition-delay: 50ms;
        }

        &-3 {
          --rotation: 60deg;
          left: 65%;
          width: 1.25em;
          transition-delay: 100ms;
        }
      }
    }

    &-lid {
      width: 3em;
      height: 3em;
      fill: none;
      stroke: currentColor;
      stroke-width: 5;

      .closed-hole {
        fill: $color-surface-button;
        transition: 30ms transform ease-out;
        transform-origin: 50% 50%;
      }

      .opened-hole {
        fill: currentColor;
      }

      .strip {
        fill: $color-surface-button;
        transform-origin: 50% 50%;
        transition: 30ms transform ease-out;
      }
    }

    &:active {
      .strip {
        transform: scaleY(0.75);
      }

      .closed-hole {
        transform: scaleY(0.5);
      }

      .line {
        transform: rotate(var(--rotation)) scaleX(1);
      }
    }
  }

  &-background {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: $color-placeholder;

    .blob {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 10;
      fill: var(--color-surface);
    }
  }

  &-1 {
    --color-surface: #bae8e8;
  }
}
